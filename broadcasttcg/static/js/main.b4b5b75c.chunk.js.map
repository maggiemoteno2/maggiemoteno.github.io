{"version":3,"sources":["actionTypes.js","container/Infomation/index.js","redux/info/actions.js","container/WebSocket.js","container/Messages/index.js","App.js","serviceWorker.js","redux/info/reducer.js","redux/messages/reducer.js","rootReducer.js","config/store.js","index.js"],"names":["ADD_NAMES","SAVE_MESSAGES","index","props","nameAdd","name","addnames","setState","state","handleChange","event","target","value","className","type","placeholder","this","onChange","to","disabled","onClick","Component","connect","userName","info","dispatch","payload","exampleSocket","WebSocket","onopen","console","log","Messages","newMessage","addMessages","saveMessage","message","sendMessage","messages","map","date","Date","sort","currentTime","previousTime","getTime","class","maxLength","required","key","id","moment","format","listOfMessages","text","send","JSON","stringify","onmessage","data","App","exact","path","component","Infomation","Boolean","window","location","hostname","match","inititalState","combineReducers","action","length","parse","persistConfig","storage","persistedReducer","persistReducer","rootReducer","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4b5b75c.chunk.js","sourcesContent":["export const ADD_NAMES=\"messages/ADD_NAMES\";\nexport const SAVE_MESSAGES =\"SAVE_MESSAGES\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addnames } from \"../../redux/info/actions\";\nimport { NavLink } from \"react-router-dom\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\"\n    };\n  }\n  nameAdd = name => {\n    this.props.addnames(name);\n    this.setState({\n      ...this.state,\n      name: \"\"\n    });\n  };\n\n  handleChange = event => {\n    this.setState({\n      name: event.target.value\n    });\n  };\n\n  render() {\n    return (\n      <div >\n        <header>\n        <h1>TCG BROADCAST</h1>\n      </header>\n        <div className=\"login-box\">\n          <div className=\"text-box\">\n            <input\n              type=\"text\"\n              className=\"placeholder\"\n              placeholder=\"Username\"\n              value={this.name}\n              name=\"name\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"btn\">\n          <NavLink className=\"log-in\" to={`Messages`}>\n            <a\n              disabled={this.state.name === \"\"}\n              onClick={() => this.nameAdd(this.state.name)}\n            >\n              Log in\n            </a>\n          </NavLink>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userName: state.info.userName\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addnames: name => {\n      dispatch(addnames(name));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(index);\n","import {ADD_NAMES} from './../../actionTypes'\nexport function addnames(name){\n    return{\n        type:ADD_NAMES,\n        payload:{name}\n    }\n}","import {SAVE_MESSAGES} from \"../actionTypes\";\n    \nconst url =\n  \"ws://ac88a44a6935711e982b602f197ebe6f-1529281652.eu-west-2.elb.amazonaws.com/chat/\";\nvar exampleSocket = new WebSocket(url);\n\nexport const saveMessage =()=> {\n    return  dispatch => {\n       \n\n        exampleSocket.onmessage = function (event) {\n            const messages = event.data\n             dispatch({type:SAVE_MESSAGES , payload:  messages});\n    }\n }\n}\n\nexampleSocket.onopen = function (event) {\n    console.log(\"connected\");\n};\n\nexport const sendMessage =(text) =>  dispatch => {\n            exampleSocket.send(JSON.stringify(text))        \n            console.log(\"text t\" , text)\n    }\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport { NavLink } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { saveMessage , sendMessage} from \"../WebSocket\"\n\n\nclass Messages extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newMessage: \"\"\n    };\n  }\n  handleChange = event => {\n    this.setState({\n      newMessage: event.target.value\n    });\n  };\n  addMessages = () => {\n    this.props.saveMessage({\n      message: this.state.newMessage,\n      name: this.props.name\n    });\n    this.props.sendMessage({message: this.state.newMessage,\n      name: this.props.name});\n    this.setState({ newMessage: \"\" });\n  };\n\n  componentWillMount(){\n    this.props.saveMessage();\n  }\n\n  render() {\n    const messages = this.props.messages\n    .map(message => ({...message,date:new Date(message.date)}))\n    .sort((currentTime,previousTime) =>{\n      return previousTime.date.getTime() - currentTime.date.getTime()\n    })\n    return (\n      <div className=\"userName\">\n        <header className=\"header\">\n          <h1>\n          <NavLink className=\"log-out\" to=\"/\">\n            <span class=\"glyphicon glyphicon-arrow-left\"></span>\n          </NavLink>\n          <div className=\"user-icon\">\n            <i class=\"fa fa-user-circle\"></i>\n          </div>\n          <div className=\"name-div\">{this.props.name}</div>\n          </h1>\n        </header>\n        <div className=\"wrapper\">\n          <div className=\"textArea\">\n          <div class=\"row\">\n            <textarea\n              placeholder=\"'Enter Your Post'\"\n              value={this.state.newMessage}\n              type=\"text\"\n              onChange={this.handleChange}\n              maxLength=\"150\"\n              required\n              />\n            <br />\n            </div>\n            <button className=\"button\" onClick={() => this.addMessages()}>\n              Post\n            </button>\n          </div>\n          <div className=\"post2text\">\n              <h1 className=\"h1\">Recent Posts</h1>\n            <div className=\"message\">\n              {messages.map(message => (\n                <div className=\"messages\" key={message[\"uuid\"]}>\n                  <div className=\"post-info\">\n                    <div className=\"message-icon\">  \n                      <i class=\"fa fa-user-circle\"></i>\n                    </div>\n                    <div id=\"name\">\n                      <div className=\"name-two\">{message[\"name\"]}</div>\n                      {moment(message.date)\n                        .format(\"MMM Do YYYY\")}\n                    </div>\n                  </div>\n                  <h3 id=\"message\">\" {message[\"message\"]} \"</h3>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  messages: state.messages.listOfMessages,\n  name: state.info.userName\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendMessage: (text) => {\n    dispatch(sendMessage(text));\n  },\n  saveMessage: (messages) => {\n    dispatch(saveMessage(messages));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\n","import './App.css';\nimport React, { Component } from 'react'\nimport Infomation from './container/Infomation/index'\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\"\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Messages from './container/Messages';\n\n// import Messages from './container/Messages'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n      <div>\n        <Route exact path=\"/\" component={Infomation}/>\n      \n        <Route path=\"/Messages\" component={Messages}/>\n      </div>\n      </Switch>\n      </Router>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_NAMES} from './../../actionTypes'\nconst inititalState={ \n\n       userName:\"\",\n\n};\n\nexport default function userName(state=inititalState,action){\n    console.log(\"hello\",state.userName)\n    switch(action.type){\n        case ADD_NAMES:{const {name}=action.payload;\n        if(state.userName.length<=0){\n            return{\n                    \n                       userName:name\n                    \n                \n            }\n        }\n        return {\n        \n            \n                   userName:name\n                \n            \n        };\n    }\n    default:{\n        return state;\n    }\n    }\n}","import {GET_MESSAGES,SAVE_MESSAGES} from './../../actionTypes'\n\nconst inititalState ={listOfMessages:[],\ndate: new Date()\n}\n\nexport default function messagesReducer(state = inititalState ,action){\n    switch(action.type){\n        case SAVE_MESSAGES:{\n            console.log(\"sdaf\",JSON.parse(action.payload))\n            const newState={\n                ...state,listOfMessages:[...JSON.parse(action.payload)]\n            };\n            return newState;\n        }\n        default:\n            return state;\n    }\n}","import {combineReducers} from 'redux'\nimport info from './redux/info/reducer'\nimport messages from './redux/messages/reducer'\n\nexport default combineReducers({\n    info,\n    messages,\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer  from './../rootReducer'\n\nconst persistConfig = {\n    key: \"root\",\n    storage\n  };\n  \n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  \n  const composeEnhancers =\n    typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n      : compose;\n  \n  const enhancer = composeEnhancers(applyMiddleware(thunk));\n  \n  const store = createStore(persistedReducer, enhancer,);\n  \n  let persistor = persistStore(store);\n  \n  export { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store,persistor} from './config/store'\nimport { PersistGate } from \"redux-persist/integration/react\";\n\n\nReactDOM.render(\n<Provider store={store}>\n<PersistGate loading={null} persistor={persistor}>\n<App />\n</PersistGate>\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}